version: '3.8' 

services:
  traefik:
    image: traefik:v2.2
    command:
      # set provider to docker
      - "--providers.docker=true"
      #only expose containers with 'traefik.enable=true' label
      - "--providers.docker.exposedbydefault=false"
      # set entrypoints
      - "--entryPoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # redirect http to https
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entryPoint.permanent=true"
      # ACME (Let's Encrypt) auto SSL
      - "--certificatesResolvers.leresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesResolvers.leresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesResolvers.leresolver.acme.tlsChallenge=true"
      - "--certificatesResolvers.leresolver.acme.httpChallenge=true"
      - "--certificatesResolvers.leresolver.acme.httpChallenge.entryPoint=web"
      # enable traefik api and dashboard
      - "--api=true"
      - "--api.dashboard=true"
    restart: always
    ports:
      - "80:80"
      - "443:443"
    networks:
      - traefik-proxy
    volumes:
      # allow traefik to listen on docker socket
      - "/var/run/docker.sock:/var/run/docker.sock"
      # Lets Encrypt
      - "./data/letsencrypt/acme.json:/letsencrypt/acme.json"
    labels:
      # Redirect all HTTP to HTTPS permanently
      - "traefik.http.routers.http_catchall.entrypoints=web"
      - "traefik.http.routers.http_catchall.rule=HostRegexp(`{any:.+}`)"
      - "traefik.http.routers.http_catchall.middlewares=https_redirect"
      - "traefik.http.middlewares.https_redirect.redirectscheme.scheme=https"

        # auth middleware
      - "traefik.http.middlewares.auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0"

      # traefik enable
      - "traefik.enable=true"

      # enable traefik api
      - "traefik.http.routers.traefikapi.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefikapi.service=api@internal"
      - "traefik.http.routers.traefikapi.middlewares=auth"
      - "traefik.http.routers.traefikapi.tls=true"
      - "traefik.http.routers.traefikapi.tls.certresolver=leresolver"
      - "traefik.http.routers.traefikapi.entrypoints=websecure"

      # enable traefik dashboard
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=leresolver"
      - "traefik.http.routers.dashboard.entrypoints=websecure"

  db:
    image: mongo
    restart: always
    networks:
      - traefik-proxy
    volumes:
      - "./data/db:/data/db"
# - "./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${DATABASE}
    labels:
      - "traefik.enable=false"

  api:
    build:
      context: src
      args:
        service: api
    restart: always
    environment:
      API_DB_USER: ${API_DB_USER}
      API_DB_PASSWORD: ${API_DB_PASSWORD}
      DATABASE: ${DATABASE}
      API_PORT: ${API_PORT}
      MONGO_DB_HOSTNAME: ${MONGO_DB_HOSTNAME}
      MONGO_DB_PORT: ${MONGO_DB_PORT}
      JWT_TOKEN_SECRET: ${JWT_TOKEN_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS}
    depends_on:
        - "db"
    networks:
      - traefik-proxy
    volumes:
      - "/app/node_modules"
    labels:
        # enable traefik auto discovery
      - "traefik.enable=true"
        # entry point for router
      - "traefik.http.routers.api.entrypoints=websecure"
        # rule which router will route requests from
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)"
        # enable tls for router
      - "traefik.http.routers.api.tls=true"
        # specify cert resolver for router
      - "traefik.http.routers.api.tls.certresolver=leresolver"
        # tell service which port (in container) to route trafic to
      - "traefik.http.services.api.loadbalancer.server.port=${API_PORT}"

networks:
    traefik-proxy:
